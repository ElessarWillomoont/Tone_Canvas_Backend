--- Project File Tree ---
[.]
  backend-dev.yaml
  Dockerfile
  flask_app.py
  requirements.txt
  [corpus]
  [data_base]
  [temp]
  [utils]
    audio_utils.py
    file_parsing.py
    pitch_handling.py
    pitch_processing.py
    trace_handling.py

--- Project File Tree with Content ---
[.]
  backend-dev.yaml
    --- File Content ---
    version: '3'
    services:
      backend-dev:
        build:
          context: .
        ports:
          - "5001:5000"
        volumes:
          - .:/app
        environment:
          - FLASK_ENV=development
          - FLASK_APP=flask_app.py
        command: ["flask", "run", "--host=0.0.0.0"]
    --- End of File ---
  Dockerfile
    --- File Content ---
    # Use an official Python runtime as a parent image
    FROM python:3.11-slim
    
    # Set the working directory in the container
    WORKDIR /app
    
    # Copy the current directory contents into the container at /app
    COPY . /app
    
    # Install any needed packages specified in requirements.txt
    RUN pip install --no-cache-dir -r requirements.txt
    
    # Make port 5000 available to the world outside this container
    EXPOSE 5000
    
    # Run the application
    CMD ["python", "flask_app.py"]
    --- End of File ---
  flask_app.py
    --- File Content ---
    from flask import Flask, send_from_directory, jsonify, request, send_file
    from flask_cors import CORS
    import os
    import yaml
    from datetime import datetime
    
    from utils.pitch_processing import process_pitch_file, save_interpolated_data_to_json, generate_sine_wave
    from utils.file_parsing import parse_praat_pitch_file
    from utils.audio_utils import calculate_times, segment_nonzero_times_and_frequencies, interpolate_pitch_segments
    from utils.pitch_handling import handle_get_pitch_json, handle_get_pitch_audio
    from utils.trace_handling import handle_send_trace, handle_send_button_log
    
    app = Flask(__name__)
    CORS(app)  # Enable CORS
    
    corpus_dir = os.path.join(os.path.dirname(__file__), 'corpus')
    icons_dir = os.path.join(os.path.dirname(__file__), 'icons')
    temp_dir = os.path.join(os.path.dirname(__file__), 'temp')
    data_base_dir = os.path.join(os.path.dirname(__file__), 'data_base')
    
    if not os.path.exists(temp_dir):
        os.makedirs(temp_dir)
    
    if not os.path.exists(data_base_dir):
        os.makedirs(data_base_dir)
    
    files = [f for f in os.listdir(corpus_dir) if f.endswith('.wav')]
    current_index = 0
    user_id = None
    current_data_file = None
    
    @app.route('/api/get-wav-file', methods=['GET'])
    def get_wav_file():
        global current_index
        if not files:
            return "No wav files found", 404
    
        file_to_play = files[current_index]
        return send_from_directory(corpus_dir, file_to_play)
    
    @app.route('/api/switch-wav-file', methods=['POST'])
    def switch_wav_file():
        global current_index
        current_index = (current_index + 1) % len(files)
        return jsonify(currentIndex=current_index)
    
    @app.route('/api/get-icon/<filename>', methods=['GET'])
    def get_icon(filename):
        return send_from_directory(icons_dir, filename)
    
    @app.route('/api/get-pitch-json', methods=['GET'])
    def get_pitch_json():
        global current_index
        return handle_get_pitch_json(files, current_index, temp_dir, corpus_dir)
    
    @app.route('/api/get-pitch-audio', methods=['GET'])
    def get_pitch_audio():
        global current_index
        return handle_get_pitch_audio(files, current_index, temp_dir, corpus_dir)
    
    @app.route('/api/get-file-name', methods=['GET'])
    def get_file_name():
        global current_index
        if not files:
            return jsonify(error="No wav files found"), 404
    
        file_name = files[current_index]
        return jsonify(fileName=file_name)
    
    @app.route('/api/send-user-id', methods=['POST'])
    def send_user_id():
        global user_id, current_data_file
    
        user_id = request.json.get('user_id')
        if not user_id:
            return jsonify(error="User ID is required"), 400
    
        current_time = datetime.now().strftime("%Y%m%d_%H%M")
        user_file_path = os.path.join(data_base_dir, f"{user_id}.yaml")
    
        if os.path.exists(user_file_path):
            current_data_file = user_file_path
        else:
            new_file_name = f"{user_id}_{current_time}.yaml"
            current_data_file = os.path.join(data_base_dir, new_file_name)
            with open(current_data_file, 'w') as yaml_file:
                yaml.dump({"user_id": user_id, "created_at": current_time}, yaml_file)
    
        return jsonify(message=f"Current data file set to: {current_data_file}"), 201
    
    @app.route('/api/send-trace', methods=['POST'])
    def send_trace():
        global current_index, current_data_file
        trace = request.json.get('trace')
        return handle_send_trace(trace, current_index, files, current_data_file)
    
    @app.route('/api/send-button-log', methods=['POST'])
    def send_button_log():
        global current_data_file
        button_name = request.json.get('button_name')
        return handle_send_button_log(button_name, current_data_file)
    
    @app.route('/api/get-progress', methods=['GET'])
    def get_progress():
        global current_index
    
        total_files = len(files)
    
        return jsonify({
            "total_files": total_files,
            "current_index": current_index
        }), 200
    
    if __name__ == '__main__':
        app.run(debug=True, host='0.0.0.0', port=5000)
    --- End of File ---
  requirements.txt
    --- File Content ---
    flask
    flask-cors
    numpy==2.0.0
    matplotlib==3.9.1
    soundfile==0.12.1
    scipy==1.14.0
    pyyaml==6.0.2
    --- End of File ---
  [corpus]
  [data_base]
  [temp]
  [utils]
    audio_utils.py
      --- File Content ---
      import numpy as np
      from scipy.interpolate import interp1d
      
      def calculate_times(frames_data, x1, dx):
          return [x1 + (frame['frame'] - 1) * dx for frame in frames_data]
      
      def segment_nonzero_times_and_frequencies(times, frequencies):
          segments = []
          current_segment = {'times': [], 'frequencies': []}
          
          for time, frequency in zip(times, frequencies):
              if frequency > 0:
                  current_segment['times'].append(time)
                  current_segment['frequencies'].append(frequency)
              else:
                  if current_segment['times']:
                      segments.append(current_segment)
                      current_segment = {'times': [], 'frequencies': []}
          
          if current_segment['times']:
              segments.append(current_segment)
          
          return segments
      
      def interpolate_pitch_segments(segments, target_sample_rate):
          all_new_times = []
          all_interpolated_frequencies = []
          
          for segment in segments:
              times = np.array(segment['times'])
              frequencies = np.array(segment['frequencies'])
              
              interpolation_function = interp1d(times, frequencies, kind='cubic', fill_value="extrapolate")
              segment_new_times = np.arange(times[0], times[-1], 1/target_sample_rate)
              segment_interpolated_frequencies = interpolation_function(segment_new_times)
              
              all_new_times.append(segment_new_times)
              all_interpolated_frequencies.append(segment_interpolated_frequencies)
          
          return all_new_times, all_interpolated_frequencies
      --- End of File ---
    file_parsing.py
      --- File Content ---
      def parse_praat_pitch_file(file_path):
          with open(file_path, 'r', encoding='utf-8') as file:
              content = file.readlines()
      
          frames_data = []
          current_frame = None
          x1, dx = None, None
      
          for line in content:
              line = line.strip()
              if line.startswith('x1 ='):
                  x1 = float(line.split('=')[1].strip())
              elif line.startswith('dx ='):
                  dx = float(line.split('=')[1].strip())
              elif line.startswith('frames [') and 'frames []' not in line:
                  if current_frame is not None:
                      frames_data.append(current_frame)
                  current_frame = {'frame': int(line.split('[')[1].split(']')[0]), 'candidates': []}
              elif line.startswith('frequency ='):
                  candidate = {'frequency': float(line.split('=')[1].strip())}
                  current_frame['candidates'].append(candidate)
              elif line.startswith('strength ='):
                  current_frame['candidates'][-1]['strength'] = float(line.split('=')[1].strip())
      
          if current_frame is not None:
              frames_data.append(current_frame)
          
          return frames_data, x1, dx
      --- End of File ---
    pitch_handling.py
      --- File Content ---
      import os
      from flask import send_file
      import soundfile as sf
      
      from utils.pitch_processing import process_pitch_file, save_interpolated_data_to_json, generate_sine_wave
      
      def handle_get_pitch_json(files, current_index, temp_dir, corpus_dir):
          if not files:
              return "No wav files found", 404
      
          pitch_file = os.path.join(corpus_dir, files[current_index].replace('.wav', '.Pitch'))
          if not os.path.exists(pitch_file):
              return "No pitch file found for the current wav file", 404
      
          target_sample_rate = 100  # Desired sample rate for the output
          new_times, interpolated_frequencies = process_pitch_file(pitch_file, target_sample_rate)
      
          json_output_path = os.path.join(temp_dir, 'interpolated_pitch_data.json')
          save_interpolated_data_to_json(new_times, interpolated_frequencies, json_output_path)
      
          return send_file(json_output_path, as_attachment=True)
      
      def handle_get_pitch_audio(files, current_index, temp_dir, corpus_dir):
          if not files:
              return "No wav files found", 404
      
          pitch_file = os.path.join(corpus_dir, files[current_index].replace('.wav', '.Pitch'))
          if not os.path.exists(pitch_file):
              return "No pitch file found for the current wav file", 404
      
          target_sample_rate = 44100  # Desired sample rate for the output
          new_times, interpolated_frequencies = process_pitch_file(pitch_file, target_sample_rate)
      
          sine_wave = generate_sine_wave(interpolated_frequencies, target_sample_rate)
          audio_output_path = os.path.join(temp_dir, 'pitch_only_audio_manually.wav')
          sf.write(audio_output_path, sine_wave, target_sample_rate)
      
          return send_file(audio_output_path, as_attachment=True)
      
      --- End of File ---
    pitch_processing.py
      --- File Content ---
      import numpy as np
      from scipy.interpolate import interp1d
      import soundfile as sf
      import json
      
      def process_pitch_file(file_path, target_sample_rate):
          from utils.file_parsing import parse_praat_pitch_file
          from utils.audio_utils import calculate_times, segment_nonzero_times_and_frequencies, interpolate_pitch_segments
          
          frames_data, x1, dx = parse_praat_pitch_file(file_path)
          times = calculate_times(frames_data, x1, dx)
          primary_frequencies = [frame['candidates'][0]['frequency'] for frame in frames_data]
      
          segments = segment_nonzero_times_and_frequencies(times, primary_frequencies)
          all_new_times, all_interpolated_frequencies = interpolate_pitch_segments(segments, target_sample_rate)
          
          combined_times = []
          combined_frequencies = []
      
          previous_end_time = None
      
          for new_times, interpolated_frequencies in zip(all_new_times, all_interpolated_frequencies):
              if previous_end_time is not None and new_times[0] > previous_end_time:
                  zero_times = np.arange(previous_end_time, new_times[0], 1/target_sample_rate)
                  combined_times.extend(zero_times)
                  combined_frequencies.extend(np.zeros_like(zero_times))
              
              combined_times.extend(new_times)
              combined_frequencies.extend(interpolated_frequencies)
              previous_end_time = new_times[-1]
          
          return np.array(combined_times), np.array(combined_frequencies)
      
      def save_interpolated_data_to_json(times, frequencies, file_path):
          data = [{'time': t, 'frequency': float(f) if f != 0 else 'NaN'} for t, f in zip(times, frequencies)]
          non_zero_frequencies = [f for f in frequencies if f > 0]
          max_frequency = max(non_zero_frequencies)
          min_frequency = min(non_zero_frequencies)
          
          json_data = {
              'max_frequency': max_frequency,
              'min_frequency': min_frequency,
              'data': data
          }
          
          with open(file_path, 'w') as json_file:
              json.dump(json_data, json_file, indent=4)
      
      def generate_sine_wave(frequencies, sample_rate):
          frequencies = np.array(frequencies)
          t = np.arange(len(frequencies)) / sample_rate
          phase = np.cumsum(2 * np.pi * frequencies / sample_rate)
          wave = np.sin(phase)
          return wave
      --- End of File ---
    trace_handling.py
      --- File Content ---
      import yaml
      from datetime import datetime
      from flask import jsonify
      
      def handle_send_trace(trace, current_index, files, current_data_file):
          if not current_data_file:
              return jsonify(error="No current data file. Set user ID first."), 400
      
          if not trace:
              return jsonify(error="Trace data is required."), 400
      
          trace_start = trace.get('trace_start')
          trace_body = trace.get('trace_body')
          trace_end = trace.get('trace_end')
      
          if not (trace_start and trace_body and trace_end):
              return jsonify(error="Trace data must include trace_start, trace_body, and trace_end."), 400
      
          current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
          current_file_name = files[current_index] if current_index < len(files) else "unknown"
      
          with open(current_data_file, 'a') as yaml_file:
              yaml.dump({
                  f"trace_{current_time}": {
                      "file_name": current_file_name,
                      "trace_start": trace_start,
                      "trace_body": [
                          {
                              "timestamp": point["timestamp"],
                              "pitch": point["pitch"],
                              "x": point["x"],
                              "y": point["y"]
                          } for point in trace_body
                      ],
                      "trace_end": trace_end
                  }
              }, yaml_file)
      
          return jsonify(message="Trace data appended to YAML file."), 201
      
      def handle_send_button_log(button_name, current_data_file):
          if not current_data_file:
              return jsonify(error="No current data file. Set user ID first."), 400
      
          if not button_name:
              return jsonify(error="Button name is required."), 400
      
          current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
      
          with open(current_data_file, 'a') as yaml_file:
              yaml.dump({
                  "button_logs": [{
                      "button_name": button_name,
                      "timestamp": current_time
                  }]
              }, yaml_file)
      
          return jsonify(message="Button log appended to YAML file."), 201
      --- End of File ---